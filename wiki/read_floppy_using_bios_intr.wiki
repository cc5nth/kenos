#summary how to read floppy in rm, using bois interrupt 0x13


<wiki:toc max_depth="1" />

= Instruction details =

|| intr Nr: || registers || for ||
|| 0x13     || ah = 0x0  || reset ||
|| 0x13     || ah = 0x2  al <- read Nr sectors, <br>dh <- Head Nr, dl<- drive Nr, <br>ch <- cylinder Nr, cl <- beginning sector Nr, <br>es:bx <- buffer || read from floopy to buffer ||

= Floppy structure =

2 x 80 x 18 x 512 = 1.44 MB

== details ==
2 Heads
80 Cylinders / H
18 Sectors / C
512 bytes/S

= code =
{{{
/*
Assume sector number is 'x' (stored in %ax in this case), then:
x / (BPB_SecPerTrk) = y,
x % (BPB_SecPerTrk) = z.
       
     The remainder 'z' PLUS 1 is the start sector number;
     z + 1 -> the start-sector number
     
     The quotient 'y' devide by BPB_NumHeads(RIGHT SHIFT 1 bit) is cylinder 
     number;
     y >> 1 -> cylinder number
     y & 1 -> magnetic header number.
*/


/* ==================================================================
   Routine: ReadSector
   Action: Read %cl Sectors from %ax sector(floppy) to %es:%bx (memory) 
*/
ReadSector:
    push    %ebp
    mov     %esp, %ebp
    sub     $2, %esp        /* Reserve space for saving %cl */
    mov     %cl, -2(%ebp)
    push    %bx             /* Save bx */
    mov     (BPB_SecPerTrk), %bl    /* %bl: the devider */
    
    div     %bl             /* 'y' in %al, 'z' in %ah */
    
    inc     %ah             /* z++, got start sector */
    mov     %ah, %cl        /* %cl <- start sector number */
    
    mov     %al ,%dh        /* %dh <- 'y' */
    shr     $1, %al         /* 'y'/BPB_NumHeads */
    mov     %al, %ch        /* %ch <- Cylinder number(y>>1) */
    
    and     $1, %dh         /* %dh <- Magnetic header(y&1) */
    pop     %bx             /* Restore %bx */
    
    /* Now, we got cylinder number in %ch, start sector number in %cl, magnetic
       header in %dh. */
    mov     (BS_DrvNum), %dl
GoOnReading:
    mov     $2, %ah
    mov     -2(%ebp), %al   /* Read %al sectors */
    int     $0x13           /* since %ah == 2, int 0x13 means reading */
    
    jc      GoOnReading     /* If CF set 1, mean read error, reread. */
    add     $2, %esp
    pop     %ebp
    ret
    /* end of ReadSector */

}}}


= Reference =
http://en.wikipedia.org/wiki/INT_13 <br>
http://en.wikipedia.org/wiki/BIOS_call