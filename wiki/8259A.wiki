#summary info about 8259A
#labels 8259A,irq

= Introduction =
xx



= Details =

在X86系统中通常集成2个8259A中断控制器，外接15个中断.<br>
master 8259A: <br>
IRQ0 -  timer/counter 0(8254定时器中断) <br>
IRQ1 -  keyboard (键盘中断) <br>
IRQ2  -  级联，连接slave 8259A的INTR pin. <br>
IRQ3 -  COMA(串口1) <br>
IRQ4 -  COMB(串口2) <br>
IRQ5 -  LPT(并口) <br>
IRQ6 -  Floppy <br>
IRQ7  -  LPT <br>
<br>
slave 8259A: <br>
IRQ8 -  RTC. <br>
IRQ9    -  generic <br>
IRQ10   -  generic <br>
IRQ11   -  generic <br>
IRQ12   -  PS/2 mouse <br>
IRQ13   -  CPU FERR# <br> 
IRQ14 -  primary IDE channel(主IDE通道) <br>
IRQ15 -  secondary IDE channel(从IDE通道) <br>

<br>
8259A中断控制器编程端口  <br>
 master 8259A: 0x20 <br>
 slave 8259A:  0xA0 <br>
在legacy BIOS中，通常编程 <br>
master 8259A硬件中断IRQ0-7对应的中断向量号为vector 0x8-0x0f, <br>
slave 8259A硬件中断IRQ8-15对应中断向量号vector 0x70-0x77 <br>
<br>
这部分详细可参考Intel SouthBridge Specifiction(8259 interrupt controller 部分) <br>
及BIOS初始化init_8259_FAR。 <br>
<br>
在保护模式下，中断向量号0-31被分配给异常和NMI，32-255分配给外部中断或用户定义的中断。 <br>
<br>
Vector Describe <br>
0 #DE，divide error,除法错误 DIV/IDIV除0 <br>
1 #DB，Debug，调试  INT1指令 <br>
2 NMI <br>
3 #BP，breakpoint   INT3指令 <br>
4 #OF，Overflow   INTO指令 <br>
5 #BR，BOUND Range Exceeded <br>
6 #UD, Undefined,Invalid Opcode <br>
7 #NM, No Math-coprocessor <br>
8 #DF, Double Fault <br>
9 Coprocessor Segment Overrun <br>
10 #TS, Invalid TSS <br>
11 #NP, Segment Not Present <br>
12 #SS, Stack Segment Fault <br>
13 #GP, General Protect <br>
14 #PF, Page Fault <br>
15 reserved <br>
16 #MF, X87 FPU Floating-point Error <br>
17 #AC, Alignment Check <br>
18 #MC, Machine Check <br>
19 #XF, SIMD Floating-point Exception <br>
20-31 reserved <br>
<br>
;我们也注意到，实模式和保护模式的中断向量0x08-0x0f不一样， <br>
所以在进入保护模式启动中断前必须重新初始化实模式下的硬件中断向量。 <br>
----
5.10 中断和异常的处理 <br>
CPU通过CALL指令调用中断或异常处理程序。 <br>
<br>
1)通过中断门或陷阱门的处理程序 <br>
通过中断门或陷阱门调用中断/异常处理程序时，因为不涉及切换任务， <br>
处理程序运行在当前任务的上下文环境，门描述符的段选择子即包含指向当前GDT或LDT中描述的段， <br>
门描述符中的偏移指向处理程序的代码入口。<br>

CPU首先保存EFLAGS，CS：EIP寄存器到堆栈， <br>
如果异常处理程序有返回退出(错误)代码，也将退出代码紧接着压在堆栈中。<br>

CPU清TF，VM, RF, NT标志． <br>
中断门和陷阱门有一个不同之处，调用中断门时，CPU保存EFLAGS后自动清IF位禁止其它中断,<br> 
处理完后恢复EFLAGS,而陷阱门不清IF位. <br>

要注意中断／异常服务程序的特权级，<br>
如果涉及不同特权级的变换，注意不同特权级下的堆栈使用以及特权保护，参考保护模式编程。<br>

中断／异常处理程序必须以指令IRET或IRETD返回．<br>
<br>
2)通过任务门的处理程序 <br>
涉及任务切换. 利用任务门处理中断/异常有几个优点: <br>
a. 中断任务当前上下文内容被自动保存 <br>
b. 启用新的任务状态段TSS, 可以使用新的0级堆栈,这样可以有效避免当前堆栈遭到破坏导致系统破坏 <br>
c. 使用任务门的处理程序可以使用独立的LDT,可以方便单独分离出来 <br>
缺点是因为任务切换涉及特权级变换,要保存任务上下文,这样任务执行相对较慢. <br>
注: IA32架构不支持任务的重入,所以在任务执行时,必须禁止该中断再被响应执行,否则产生#GP异常. <br>
<br>
5.11 异常的退出(错误)代码error code <br>
当一个异常产生的条件和一个特殊段有关时,处理器把一个错误代码压入异常处理程序的堆栈中. <br>
错误代码的格式如下: <br>
31   15  3  2  1   0 <br>
---------------------------------------------- <br>
   reserved     index         TI IDT EXT<br>
----------------------------------------------  <br>
<br>
有点像一个段选择子,但是低位不是TI和RPL,而代表三个标志 <br>
bit 0 EXT External event, 当被设置,表明有外部硬件中断导致异常 <br>
<br>
bit 1  IDT Description location,  
当为1,表明error code的索引index指向的是IDT表的门描述符<br>
当为0,表明error code的索引index指向的是GDT或LDT表的描述符(根据TI bit2). <br>
<br>
bit 2 TI GDT/LDT, 当bit 1 IDT为0时有效, TI=1 LDT, TI=0 GDT. <br>
<br>
注在执行IRET返回时,error code并不并pop,所以必须有处理程序在执行IRET返回前POP.  <br>
在一般由外部INTR或LINT1:0, INT n引起的异常中,CPU并不使用error code. <br>
关于异常使用error code,可参考各异常的详细资料,如中断向量号为10的异常:Invalid TSS(#TS)<br>


----
中斷控制器有優先順序. <br> 
0 最大. 7 最小. 當有二個裝備同時發出 IRQ 時. 就由這個順序來決定誰先被服務.<br> 
因 IRQ 2 被當成第二個中斷控制器的輸入. 所以整個中斷請求的順序為 : <br>
0 , 1 , 2 ( 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 ) , 3 , 4 , 5 , 6 , 7.